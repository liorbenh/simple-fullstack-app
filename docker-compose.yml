version: '3.8'

services:
  # PD (Placement Driver for TiDB cluster) - Must start first
  pd:
    image: pingcap/pd:latest
    container_name: pd
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - pd_data:/tmp/pd
    networks:
      - sre-network
    environment:
      - GOGC=100
    command:
      - "--name=pd"
      - "--data-dir=/tmp/pd"
      - "--client-urls=http://0.0.0.0:2379"
      - "--peer-urls=http://0.0.0.0:2380"
      - "--advertise-client-urls=http://pd:2379"
      - "--advertise-peer-urls=http://pd:2380"
      - "--initial-cluster=pd=http://pd:2380"
      - "--log-level=info"

  # TiKV (Storage layer)
  tikv:
    image: pingcap/tikv:latest
    container_name: tikv
    ports:
      - "20160:20160"
    volumes:
      - tikv_data:/tmp/tikv
    networks:
      - sre-network
    depends_on:
      - pd
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
    command:
      - "--addr=0.0.0.0:20160"
      - "--advertise-addr=tikv:20160"
      - "--data-dir=/tmp/tikv"
      - "--pd-endpoints=pd:2379"
      - "--log-level=info"
    # TiDB Database
  tidb:
    image: pingcap/tidb:latest
    container_name: tidb
    ports:
      - "4000:4000"
      - "10080:10080"
    environment:
      - TIDB_VERSION=latest
    volumes:
      - tidb_data:/tmp/tidb
      - ./api/init:/docker-entrypoint-initdb.d
    networks:
      - sre-network
    depends_on:
      tikv:
        condition: service_started
      pd:
        condition: service_started
    command:
      - "--store=tikv"
      - "--path=pd:2379"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 4000 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 60s
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - sre-network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 3000
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_NUM_PARTITIONS: 1
    networks:
      - sre-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:29092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s

  # TiDB CDC (Change Data Capture) - Simplified approach
  ticdc:
    image: pingcap/ticdc:latest
    container_name: ticdc
    depends_on:
      - tidb
      - kafka
    networks:
      - sre-network
    ports:
      - "8300:8300"
    command:
      - "/cdc"
      - "server"
      - "--addr=0.0.0.0:8300"
      - "--advertise-addr=ticdc:8300"
      - "--pd=http://pd:2379"
      - "--log-level=info"
  
  # CDC Changefeed Creator
  cdc-init:
    image: curlimages/curl:latest
    container_name: cdc-init
    depends_on:
      - ticdc
    networks:
      - sre-network
    volumes:
      - ./cdc-config:/config
    restart: "no"
    command: |
      sh -c "
        echo 'Waiting for TiCDC to be fully ready...' &&
        sleep 60 &&
        echo 'Creating CDC changefeed...' &&
        curl -X POST http://ticdc:8300/api/v1/changefeeds \
          -H 'Content-Type: application/json' \
          -d @/config/cdc-task.json &&
        echo 'CDC changefeed created successfully'
      "

  # API Service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=tidb
      - DB_PORT=4000
      - DB_USER=root
      - DB_PASSWORD=
      - DB_NAME=sre_test
      - KAFKA_BROKERS=kafka:29092
      - JWT_SECRET=your-secret-key-here-change-in-production
    depends_on:
      tidb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - sre-network
    volumes:
      - ./api/src:/app/src
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 3001 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Consumer Service
  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer
    environment:
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_TOPIC=tidb-cdc-changes
      - HEALTH_PORT=3002
    depends_on:
      kafka:
        condition: service_healthy
      ticdc:
        condition: service_started
      cdc-init:
        condition: service_completed_successfully
    networks:
      - sre-network
    volumes:
      - ./consumer/src:/app/src
    restart: unless-stopped

  # Client Service
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
    depends_on:
      - api
    networks:
      - sre-network
    volumes:
      - ./client/src:/app/src
      - ./client/public:/app/public
    restart: unless-stopped

networks:
  sre-network:
    driver: bridge

volumes:
  tidb_data:
  tikv_data:
  pd_data:
  ticdc_data: