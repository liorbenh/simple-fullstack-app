version: '3.8'

services:
  # TiDB Database
  tidb:
    image: pingcap/tidb:latest
    container_name: tidb
    ports:
      - "4000:4000"
    environment:
      - TIDB_VERSION=latest
    volumes:
      - tidb_data:/tmp/tidb
      - ./api/init:/docker-entrypoint-initdb.d
    networks:
      - sre-network
    healthcheck:
      test: ["CMD", "mysql", "-h", "localhost", "-P", "4000", "-u", "root", "-e", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # TiKV (required for TiDB)
  tikv:
    image: pingcap/tikv:latest
    container_name: tikv
    ports:
      - "20160:20160"
    volumes:
      - tikv_data:/tmp/tikv
    networks:
      - sre-network
    command: |
      --addr 0.0.0.0:20160
      --advertise-addr tikv:20160
      --data-dir /tmp/tikv
      --pd pd:2379

  # PD (Placement Driver for TiDB cluster)
  pd:
    image: pingcap/pd:latest
    container_name: pd
    ports:
      - "2379:2379"
    volumes:
      - pd_data:/tmp/pd
    networks:
      - sre-network
    command: |
      --name=pd
      --data-dir=/tmp/pd
      --client-urls=http://0.0.0.0:2379
      --peer-urls=http://0.0.0.0:2380
      --advertise-client-urls=http://pd:2379
      --advertise-peer-urls=http://pd:2380
      --initial-cluster=pd=http://pd:2380

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - sre-network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - sre-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # TiDB CDC (Change Data Capture)
  ticdc:
    image: pingcap/ticdc:latest
    container_name: ticdc
    depends_on:
      tidb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./cdc-config:/config
      - ticdc_data:/tmp/ticdc
    networks:
      - sre-network
    ports:
      - "8300:8300"
    command: |
      server
      --addr=0.0.0.0:8300
      --advertise-addr=ticdc:8300
      --pd=http://pd:2379
      --data-dir=/tmp/ticdc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8300/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # CDC Task Creator (initializes CDC changefeed)
  cdc-init:
    image: curlimages/curl:latest
    container_name: cdc-init
    depends_on:
      ticdc:
        condition: service_healthy
    networks:
      - sre-network
    volumes:
      - ./cdc-config:/config
    command: |
      sh -c "
        sleep 30 &&
        curl -X POST http://ticdc:8300/api/v1/changefeeds \
        -H 'Content-Type: application/json' \
        -d @/config/cdc-task.json
      "

  # API Service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=tidb
      - DB_PORT=4000
      - DB_USER=root
      - DB_PASSWORD=
      - DB_NAME=sre_test
      - KAFKA_BROKERS=kafka:29092
      - JWT_SECRET=your-secret-key-here
    depends_on:
      tidb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - sre-network
    volumes:
      - ./api/src:/app/src
    restart: unless-stopped

  # Consumer Service
  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer
    environment:
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_TOPIC=tidb-cdc-changes
    depends_on:
      kafka:
        condition: service_healthy
      cdc-init:
        condition: service_completed_successfully
    networks:
      - sre-network
    volumes:
      - ./consumer/src:/app/src
    restart: unless-stopped

  # Client Service
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
    depends_on:
      - api
    networks:
      - sre-network
    volumes:
      - ./client/src:/app/src
      - ./client/public:/app/public
    restart: unless-stopped

networks:
  sre-network:
    driver: bridge

volumes:
  tidb_data:
  tikv_data:
  pd_data:
  ticdc_data:
